% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-specifications.R
\name{new_model_spec}
\alias{new_model_spec}
\title{Model specification for \code{blms_model}}
\usage{
new_model_spec(
  class,
  parameters,
  resp_var,
  pred_vars,
  func_name,
  func_stanvar,
  description = "",
  details = "",
  note = "",
  example = "",
  block_var = "blockgrp",
  dec_var = NULL,
  fixed_vars = list(),
  func_data = c(resp_var, pred_vars),
  func_params = c(names(parameters)),
  func_input = c(block_var, resp_var, pred_vars, names(parameters)),
  func_par = "mu",
  family = brms::bernoulli(link = "identity"),
  par_form = list(),
  par_transform = list(),
  use_blm = F,
  ...
)
}
\arguments{
\item{class}{\code{character}. The name of the model class.}

\item{parameters}{Named \code{list()} containing \code{list}s that define
lower, upper bound, and optinally other specification for single
parameters. The names of this list are interpreted as}

\item{resp_var}{\code{character}. Name for the response variable.}

\item{pred_vars}{\code{character}. Names of one or more response variables.}

\item{func_name}{\code{character}. Name of the Stan function that defines
the model.}

\item{func_stanvar}{\code{stanvar} created using \code{brms::stanvar()} with
\code{block = 'functions'} containing at least the model function.}

\item{description}{\code{character}, optional. Description of the model.}

\item{details}{\code{character}, optional. Details for the model.}

\item{note}{\code{character}, optional. Notes with additional information
about the model.}

\item{example}{\code{character}, optional. Example code for running the
model.}

\item{block_var}{\code{character}, optional. Name for the variable that
defines the blocks in the data. This will be created by the
\code{block()} call. Defaults to \code{'bockgrp'}.
See \code{\link{blms_model}} for details.}

\item{dec_var}{\code{character}, optional. Name for the \code{dec} variable.
Only used for models that use \code{\link[brms]{wiener()}} as their
family.}

\item{fixed_vars}{Named \code{list()}, optional. List of variables or
parameters used in model formulas whose values should be fixed.}

\item{func_data}{\code{character} vector, optional. List of data variables
(including \code{block_var}) that will be passed to the model
function defined in \code{func_stanvar}. Defaults to
\code{c(block_var, resp_var, pred_vars)}.}

\item{func_params}{\code{character} vector, optional. List of parameters
that will be passed to the model function defined in
\code{func_stanvar}. Defaults to \code{names(parameters)}.}

\item{func_input}{\code{character} vector, optional. List of variables that
will be passed to the model function defined in \code{func_stanvar}.}

\item{func_par}{\code{character}, optional. Name of the parameter for which
\code{pred_vars} are specified on the right-hand side of its
formula. The right-hand side of this formula will be replaced by a
call to the model function defined in \code{func_stanvar}. Defaults
to \code{mu}}

\item{family}{\code{family}, optional. Family used to predict
\code{resp_var}. Defaults to \code{bernoulli(link = 'identity')},
meaning that the expected prediction formula (usually the output of
the model function defined in \code{func_stanvar}) provides the
probability for the upper bound (\code{TRUE} if \code{resp_var}
provided in the input data is \code{logical},
\code{levels(factor(resp_var)))[2]} if \code{resp_var} provided in
the input data is \code{facor}, \code{character}, or \code{numeric}).}

\item{par_form}{\code{list()}, optional. List of formulas for the
prediction of parameters given by \code{parameters}. Defaults to
\code{parameter ~ 1} for each parameter in \code{names(parameters)}.
Multiple parameters on the left-hand side of the formula combined by
\code{+} are allowed. The respective formula on the right-hand side
will be used for each parameter on the left-hand side. If
\code{par_form} is given as an argument to \code{blms_model},
the formulas will overwrite those specified by \code{par_form}
defined in the \code{model_spec}. Formulas passed via \code{...}
to \code{blms_model} will overwrite formulas passed via its
\code{par_form} argument or defined by its \code{model_spec}.}

\item{par_transform}{\code{list()}, optional. List of transformation
formulas for parameters in \code{names(parameters)}. Transformation
formulas given by \code{par_transform} can take the form of e.g.
\code{parameter ~ inv_logit(parameter) * 5}. In this case, the
parameter name on the right-hand side will be appended by
\code{'raw'} (e.g. \code{alpha ~ inv_logit(alpha)} will become
\code{alpha ~ inv_logit(alpharaw)}) and the corresponding formula
for the prediction of the parameter will take the the new name
(e.g. \code{alpharaw}) on their left-hand side (e.g.
\code{alpha ~ 1} will become \code{alpharaw ~ 1}). Multiple
parameters combined by \code{+} can be specified on the left-hand
side of the formula. In this case, the variable \code{x} on the
right-hand side of the formula will be interpreted as the
parameter and replaced for each parameter on the left-hand side as
described above (e.g. \code{alpha + beta ~ inv_logit(x)} will
create two formulas \code{alpha ~ inv_logit(alpharaw)} and
\code{beta ~ inv_logit(betaraw)} and the formulas for \code{alpha}
and \code{beta} will have their left-hand side replaced by
\code{alpharaw} and \code{betaraw}, respectively). If
\code{par_transform} is given as an argument to \code{blms_model},
the formulas will overwrite those specified by \code{par_transform}
defined in the \code{model_spec}. In addition, transformation
formulas can be given as formulas passed via the \code{...}
arguments to \code{blms_model}, using a \code{transform()} call
on their left-hand side. Again, multiple parameters combined by
\code{+} can be specified on the left-hand side
(inside the \code{transform()} call). Formulas passed via \code{...}
to \code{blms_model} will overwrite formulas passed via its
\code{par_transform} argument or defined by its \code{model_spec}.}

\item{use_blm}{\code{logical}, optional. Should the block structure be
handled by \code{\link{blm_model}} internally. In this case,
\code{func_input} will not contain \code{block_var}, so that the
function specified in \code{func_stanvar} should not take
\code{block_var} as its first argument. Currently not used.}

\item{...}{Further arguments added to}
}
\value{
Object of class \code{model_spec} to be used with \code{blms_model}.
}
\description{
Model specification for \code{blms_model}
}
\examples{
func_wsls <- brms::stanvar(block = 'functions', scode = '
 vector win_stay_lose_switch(
   vector blockgrp, vector action, vector outcome, // func_data
   vector beta) { // func_params
   int N = size(action);
   vector out[N];
   out[1] = 0.5;
   for (n in 2:N) {
     if (blockgrp[n]!=blockgrp[n-1]) {
       out[n] = 0.5;
       continue;
     }
     int stay = action[n] == action[n-1] ? 1 : -1;
     int win = outcome > 0 ? 1 : -1;
     int resp_bound = action[n] == max(action) ? 1 : -1;
     real beta_x = stay * outcome * resp_bound * beta[n];
     out[n] = inv_logit(beta_x);
    }
    return(out)
 }
'
)
mspec <- new_model_spec(class = 'wsls',
                        description = 'Win-Stay-Lose-Switch Model',
                        parameters = list(beta=list(lb = -Inf, ub = Inf)),
                        resp_var = 'choice',
                        pred_vars = c('outcome'),
                        func_name = 'win_stay_lose_switch',
                        func_stanvar = func_wsls
                        )



}
